name: CI

on:
  push:
    branches:
      - master
  pull_request:
  create:
    tags:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: stanza-base:latest
          outputs: type=oci,dest=/tmp/stanza-base.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: stanza-base
          path: /tmp/stanza-base.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Cinc
        run: |
          curl -L https://omnitruck.cinc.sh/install.sh | \
          sudo bash -s -- -P cinc-auditor -v 4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: stanza-base
          path: /tmp

      - name: Load image
        run: |
          cat /tmp/stanza-base.tar | docker import - stanza-base:latest

      - name: Start test container
        run: |
          docker run -d \
            --name test \
            --entrypoint=/bin/sleep \
            stanza-base:latest 3600

      - name: Run tests
        run: cinc-auditor exec test/integration.rb -t docker://test

  release:
    needs: test
    # skip release unless new tag triggered the workflow
    if: github.event_name == 'create'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: stanza-base
          path: /tmp

      - name: Load image
        run: |
          cat /tmp/stanza-base.tar | docker import - stanza-base:latest

      - name: Get the version
        id: get_tag_name
        run: echo ::set-output name=GIT_TAG_NAME::${GITHUB_REF/refs\/tags\//}

      - name: Release
        uses: kurkop/push-docker-gcr@v1.2.2
        with:
          docker_image_name: stanza-base
          docker_image_tag: ${{ steps.get_tag_name.outputs.GIT_TAG_NAME}}
          docker_context: ./
          gcr_host: gcr.io
          gcr_project_id: observiq-container-images
          gcr_service_key: ${{ secrets.GCLOUD_SERVICE_KEY }}